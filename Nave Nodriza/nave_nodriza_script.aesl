<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event name="cluster_encontrados" size="1"/>
<event name="estado" size="1"/>
<constant name="TIME_DETECT" value="2000"/>
<constant name="UMB_CLUST" value="200"/>
<constant name="UMB_NAVE" value="940"/>
<constant name="UMB_OBST" value="3000"/>
<constant name="VEL" value="300"/>


<!--node -->
<node name=""><![CDATA[var black_level = 500
var white_level = 800
var s[2]
var dir
var STATE_BLACK=0
var STATE_WHITE=1
var DIR_LEFT=-1
var DIR_L_LEFT=-2
var DIR_RIGHT=1
 var DIR_L_RIGHT=2
var DIR_LOST=10
var DIR_FRONT=0

var accTampon0[4] = 0, 0, 0, 0
var accTamponPos0 = 0
var accTampon1[4] = 0, 0, 0, 0
var accTamponPos1 = 0
var sumacc0
var sumacc1
var tiempo_avance = 75  # Tiempo en milisegundos para avanzar
var tiempo_retroceso = 50  # Tiempo en milisegundos para retroceder
var tiempo_transcurrido = 0  # Tiempo transcurrido desde el último cambio de estado
var estado_volver=0

var state_recolecta=0
var state=0	#Variable para ver que estado tocaría ahora (3=volver,2=seguir,1=recolectar,0=explorar)

var encontrados=0 #Numero de cluster encontrados (inicializado a 0)
var random_turn=0	#Número aleatorio inicalizado a 0 

timer.period[0]=1000	#Periodo de tiempo inicializado a 0

onevent prox
	#OBSTÁCULOS
	if prox.horizontal[3] > UMB_OBST then
   		call leds.top(32,0,0)
   	 	motor.left.target = -VEL
    	motor.right.target = -VEL

  	elseif prox.horizontal[5] > UMB_OBST or prox.horizontal[6] > UMB_OBST then
    	call leds.top(32,0,0)
   		motor.left.target = VEL
    	motor.right.target = VEL

  	elseif prox.horizontal[3] > UMB_OBST or prox.horizontal[4] > UMB_OBST then
    	call leds.top(32,0,0)
    	motor.left.target = -400
   		motor.right.target = VEL

  	elseif prox.horizontal[1] > UMB_OBST or prox.horizontal[0] > UMB_OBST then
    	call leds.top(32,0,0)
   		motor.left.target = VEL
    	motor.right.target = -400
    	
    #Si no hay obstáculos
  	else
  		#Y el estado es de exploración recolectamos
  		if state==0 then
  			callsub recolecta
  		#Si el estado es volver volvemos
  		elseif  state==4 then
	  		callsub volver
	  	end
  end
  

	  
sub explora 
	#Si el valor es positivo avanzamos girando levemente a la derecha
	if random_turn >0 then
	     	motor.left.target = VEL
	    	motor.right.target = VEL / 2  # Gira a la derecha
	 #Si el valor es negativo avanza girando levemente a la izquierda
	 else
	   		 motor.left.target  = VEL / 2
	     	motor.right.target= VEL  # Gira a la izquierda
	 end

sub volver
	#Si hemos detectado que ya hemos llegado nos ponemos a explorar
	if prox.ground.delta[0]>UMB_NAVE or prox.ground.delta[1]> UMB_NAVE then
		state=0
	#Si aún no hemos llegado
	else
		accTampon0[accTamponPos0] = acc[0]-2  # Medir inclinacion lateral
  		accTamponPos0 = (accTamponPos0 + 1) % 4
	  	sumacc0 = accTampon0[0] + accTampon0[1] + accTampon0[2] + accTampon0[3]	
	
	  	accTampon1[accTamponPos1] = acc[1]     # Medir inclinacion frontal
	  	accTamponPos1 = (accTamponPos1 + 1) % 4
	  	sumacc1 = accTampon1[0] + accTampon1[1] + accTampon1[2] + accTampon1[3]
	
	    motor.left.target = sumacc0 * 15 + sumacc1 * 15
	    motor.right.target = -sumacc0 * 15 + sumacc1 * 15
   	end
   	
sub sigue 
	#Line Follower
	if prox.ground.delta[0] <= black_level then
		s[0] = STATE_BLACK
	end
	if prox.ground.delta[0] > white_level  then
		s[0] = STATE_WHITE
	end
	
	if prox.ground.delta[1] <= black_level then
		s[1] = STATE_BLACK
	end
	if prox.ground.delta[1] > white_level then
		s[1] = STATE_WHITE
	end
	
	
	if s[0] == STATE_BLACK and s[1] == STATE_BLACK then
		call leds.top(32,0,32)
		# Black line right under us
		dir = DIR_FRONT
	elseif s[0] == STATE_WHITE and s[1] == STATE_BLACK then
		call leds.top(32,0,32)
		dir = DIR_RIGHT
	elseif s[1] == STATE_WHITE and s[0] == STATE_BLACK then
		call leds.top(32,0,32)
		dir = DIR_LEFT
	else 
		call leds.top(32,32,32)
		dir = DIR_LOST
	end
	
	if dir == DIR_FRONT then
		motor.left.target = VEL
		motor.right.target = VEL
		call leds.circle(32,0,0,0,32,0,0,0)
	elseif dir == DIR_RIGHT then
		motor.left.target = VEL
		motor.right.target = 0
		call leds.circle(0,32,0,32,0,0,0,0)
	elseif dir == DIR_LEFT then
		motor.left.target = 0
		motor.right.target = VEL
		call leds.circle(0,0,0,0,0,32,0,32)
	elseif dir == DIR_L_LEFT then
		motor.left.target = -VEL
		motor.right.target = VEL
		call leds.circle(0,0,0,0,0,0,32,0)
	elseif dir == DIR_L_RIGHT then
		motor.left.target = VEL
		motor.right.target = -VEL
		call leds.circle(0,0,32,0,0,0,0,0)
	elseif dir == DIR_LOST then
		callsub explora
	end
	
sub recolecta
		#DETECCIÓN DE CLUSTER
		if prox.ground.reflected[0] < UMB_CLUST or prox.ground.reflected[1] < UMB_CLUST then
		 	call leds.top(0, 0, 32)  #Indicar con LEDs que se ha detectado un posible clúster
		 	motor.right.target = -VEL
		    #Debe avanzar (state_recolecta=1)
	   		if  state_recolecta==1 then #Avanza
		   			motor.left.target = VEL
		     		motor.right.target = VEL
	        #Si aún no se ha iniciado la comprobación (state_recolecta=0)  
	   		else
	   		#Inicializamos el estado de avanzar junto con la inicialización del temporizador
	            timer.period[0] = TIME_DETECT					
	   			state_recolecta=1
	         end
	        
	    #NO HAY DETECCIÓN DE CLUSTER 
		 else	    	
			callsub sigue	
	  	end
	  	
     
#Si se acabo el temporizador
 onevent timer0
 	#Volvemos a calcular el valor aleatorio y emitimos el estado
 	call math.rand(random_turn)
 	
	#Si ha terminado el temporizador y estaba avanzando le decimos que de vueltas
	 if  state_recolecta==1 then
	 	#Si aún está encima del clúster, 
	 	
	 	if prox.ground.reflected[0] < UMB_CLUST and prox.ground.reflected[1] < UMB_CLUST then
	 		call leds.top(0,32,0)	#Indicamos con los leds que lo encontramos
	 		encontrados=encontrados+1
	 		emit cluster_encontrados(encontrados)	#Emitimos los que llevamos encontrados
	 		state=4
	 		
	 	end
	 	timer.period[0]=1000
	 	state_recolecta=0
	 end]]></node>


</network>
